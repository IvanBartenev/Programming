#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <locale.h>

#define SCREENW 100
#define SCREENH 60

typedef double (*Tfun)(double);
double fun1(double);
double fun2(double);
double fun3(double);
double tabulation(Tfun, double, double, double);
double graph(double, double, Tfun);

void main()
{
	setlocale(0, "rus");
	int localchoise1, localchoise2, localchoise3, mainchoise = 0;
	char lb, rb;
	double ln, rn;
	double x, step;
	while (mainchoise != 4)
	{
		puts("Меню:\n\n1.Вычислить значение предложенной функции Y(x), V(x) или S(x);\n2.Табулировать функцию Y(x), V(x) или S(x);\n3.Выполнить операцию (построение графика) над функцией Y(x), V(x) или S(x);\n4.Выход;\n\nВведите цифру нужного пункта меню:");
		scanf_s("%d", &mainchoise);
		switch (mainchoise)
		{
		case 1:
			puts("\nВведите значениe аргумента x:\n");
			scanf_s("%lf", &x);
			puts("\nВыберите функцию: (Y(x) - 1, V(x) - 2, S(x) - 3)\n");
			scanf_s("%d", &localchoise1);
			switch (localchoise1)
			{
				puts("Выберите функцию: (Y(x) - 1, V(x) - 2, S(x) - 3)\n");
			case 1:
				if (x <= 0) {
					puts("\nПодлогарифмическое выражение не может быть меньше или рано нулю! Неудачная попытка.");
					break;
				}
				else {
					printf("S(%.1lf) = %.5lf", x, fun1(x));
					break;
				}
			case 2:
				printf("V(%.1lf) = %.5lf", x, fun2(x));
				break;
			case 3:
				if (x == -1) {
					puts("\nЗнаменатель равен 0! Неудачная попытка.");
					break;
				}
				else {
					printf("S(%.1lf) = %.5lf", x, fun3(x));
					break;
				}
			default:
				puts("Ошибка!");
				break;
			}
			break;
		case 2:
			printf("\nВведите интервал, полуинтервал или отрезок для функции (Пример: [1;5)): \n");
			scanf("\n%c%lf;%lf%c", &lb, &ln, &rn, &rb);
			if ((lb == '(' || lb == '[') && (rb == ')' || rb == ']')) {
				exit;
			}
			else {
				puts("\n\nОшибка: Вы ввели невозможный символ для границы границы");
				break;
			}
			if (ln > rn) {
				printf("\n\nЗначение левой границы интервала больше значения правой границы интервала!");
			}
			printf("\nВаш диапозон: %c%.2lf;%.2lf%c", lb, ln, rn, rb);
			printf("\n\nВведите шаг для функции: ");
			scanf("%lf", &step);
			if (rb == ')') {
				rn -= step;
			}
			if (lb == '(') {
				ln += step;
			}
			puts("\nВведите номер нужной функции(Y(x) - 1; V(x) - 2; S(x) - 3):");
			scanf("%d", &localchoise2);
			switch (localchoise2)
			{
			case 1:
				tabulation(fun1, ln, rn, step);
				break;
			case 2:
				tabulation(fun2, ln, rn, step);
				break;
			case 3:
				tabulation(fun3, ln, rn, step);
				break;
			default:
				puts("Введён некорректный номер функции!");
				break;
			}
			break;
		case 3:
			printf("\nВведите интервал, полуинтервал или отрезок для функции (Пример: [1;5)): \n");
			scanf("\n%c%lf;%lf%c", &lb, &ln, &rn, &rb);
			if ((lb == '(' || lb == '[') && (rb == ')' || rb == ']')) {
				exit;
			}
			else {
				puts("\n\nОшибка: Вы ввели невозможный символ для границы границы");
				break;
			}
			if (ln > rn) {
				printf("\n\nЗначение левой границы интервала больше значения правой границы интервала!");
			}
			printf("\nВаш диапозон: %c%.2lf;%.2lf%c", lb, ln, rn, rb);
			printf("\n\nВведите шаг для функции: ");
			scanf("%lf", &step);
			if (rb == ')') {
				rn -= step;
			}
			if (lb == '(') {
				ln += step;
			}
			puts("\nВведите номер нужной функции(Y(x) - 1; V(x) - 2; S(x) - 3):");
			scanf("%d", &localchoise3);
			switch (localchoise3)
			{
			case 1:
				graph(ln, rn, fun1);
				break;
			case 2:
				graph(ln, rn, fun2);
				break;
			case 3:
				graph(ln, rn, fun3);
				break;
			default:
				puts("Введён некорректный номер функции!");
				break;
			}
			break;
		}
	}
	return 0;
}

double fun1(double x)
{
	double res;
	res = log(fabs(sqrt(x * x * x)));
	return res;
}

double fun2(double x)
{
	double res;
	if (x > 1) {
		res = sqrt(tan((x * x) - 1));
	}
	else if (x >= 0 && x <= 1) {
		res = -2 * x;
	}
	else {
		res = exp(cos(x));
	}
	return res;
}

double fun3(double x)
{
	double res;
	res = (x - 1) / (x + 1) + 1 / 3 * pow(((x - 1) / (x + 1)), 3) + 1 / 5 * pow(((x - 1) / (x + 1)), 5) + 1 / 7 * pow(((x - 1) / (x + 1)), 7);
	return res;
}

double tabulation(Tfun func, double lb, double rb, double step)
{
	puts("\n- - - - - - - - - - - - - - - - - - - - - - - - -");
	for (double x = lb; x <= rb; x += step) {
		printf("|	x = %5.2f	|	y = %8.5f	|\n", x, func(x));
	}
	puts("- - - - - - - - - - - - - - - - - - - - - - - - -");
	puts("\n\n\n");
}

double graph(double x0, double x1, Tfun funс)
{
	char screen[SCREENW][SCREENH];
	double x, y[SCREENW];
	double ymin = 0, ymax = 0;
	double hx, hy;
	int i, j;
	int xz, yz;
	hx = (x1 - x0) / (SCREENW - 1);
	for (i = 0, x = x0; i < SCREENW; ++i, x += hx)
	{
		y[i] = funс(x);
		if (y[i] < ymin) ymin = y[i];
		if (y[i] > ymax) ymax = y[i];
	}
	hy = (ymax - ymin) / (SCREENH - 1);
	yz = (int)floor(ymax / hy + 0.5);
	xz = (int)floor((0. - x0) / hx + 0.5);
	for (j = 0; j < SCREENH; ++j)
		for (i = 0; i < SCREENW; ++i)
		{
			if (j == yz && i == xz) screen[i][j] = '+';
			else if (j == yz) screen[i][j] = '-';
			else if (i == xz) screen[i][j] = '|';
			else screen[i][j] = ' ';
		}
	for (i = 0; i < SCREENW; ++i) {
		j = (int)floor((ymax - y[i]) / hy + 0.5);
		screen[i][j] = '*';
	}
	for (j = 0; j < SCREENH; ++j)
	{
		for (i = 0; i < SCREENW; ++i)  putchar(screen[i][j]);
		putchar('\n');
	}
	return 0;
}


