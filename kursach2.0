#include <stdio.h>
#include <locale.h>
#include <math.h>
#include <malloc.h>
#include <stdlib.h>

#define PI 3.1415926535
#define SCREENW  100
#define SCREENH  50

typedef double (*Funcional)(double);

void menu();
double f1(double x);
double f2(double x);
int print_func(Funcional func, double lb, double rb, double step);
int graph(double x0, double x1, Funcional funс);


void main()
{
	setlocale(0, "Russian");
	double x;
	double* res;
	int choisemain;
	char lb, rb;
	double lNum, rNum, step;
	int choise;
	menu();
	scanf("%d", &choisemain);
	while (choisemain != 6) {
		switch (choisemain) {
		case 1:
			printf("\nВведите значение x: ");
			scanf("%lf", &x);
			printf("\nY(%.2lf)=%.2lf", x, f1(x));
			break;
		case 2:
			printf("\nВведите значение x: ");
			scanf("%lf", &x);
			printf("\nV(%.2lf)=%.2lf", x, f2(x));
			break;
		case 3:
			getchar();
			printf("\n\nВведите интервал, полуинтервал или отрезок функции (Примеры ввода: (1;2,5), [2;4,25] ):\n");
			scanf("\n%c%lf;%lf%c", &lb, &lNum, &rNum, &rb);
			printf("\n%c%.2lf;%.2lf%c", lb, lNum, rNum, rb);
			if (lNum > rNum) {
				printf("\n\nОшибка: Значение левой границы интервала больше значения правой границы интервала.");
			}
			if ((lb == '(' || lb == '[') && (rb == ')' || rb == ']')) {
				getchar();
			}
			else {
				puts("\n\nОшибка: Вы ввели невозможный символ для границы границы");
				break;
			}
			printf("\n\nВведите значение шага функции: ");
			scanf("%lf", &step);
			if (rb == ')') {
				rNum = rNum - step;
			}
			if (lb == '(') {
				lNum = lNum + step;
			}
			print_func(f1, lNum, rNum, step);
			break;
		case 4:
			getchar();
			printf("\n\nВведите интервал, полуинтервал или отрезок функции (Примеры ввода: (1;2,5), [2;4,25] ):\n");
			scanf("\n%c%lf;%lf%c", &lb, &lNum, &rNum, &rb);
			printf("\n%c%.2lf;%.2lf%c", lb, lNum, rNum, rb);
			if (lNum > rNum) {
				printf("\n\nОшибка: Значение левой границы интервала больше значения правой границы интервала.");
			}
			if ((lb == '(' || lb == '[') && (rb == ')' || rb == ']')) {
				getchar();
			}
			else {
				puts("\n\nОшибка: Вы ввели невозможный символ для границы");
				break;
			}
			printf("\n\nВведите значение шага функции: ");
			scanf("%lf", &step);
			if (rb == ')') {
				rNum = rNum - step;
			}
			if (lb == '(') {
				lNum = lNum + step;
			}
			print_func(f2, lNum, rNum, step);
			break;
		case 5:
			getchar();
			printf("\nВведите интервал, полуинтервал или отрезок функции (Примеры ввода: (1;2,5), [2;4,25] ):\n");
			scanf("\n%c%lf;%lf%c", &lb, &lNum, &rNum, &rb);
			printf("\n%c%.2lf;%.2lf%c", lb, lNum, rNum, rb);
			if (lNum > rNum) {
				printf("\n\nОшибка: Значение левой границы интервала больше значения правой границы интервала.");
			}
			if ((lb == '(' || lb == '[') && (rb == ')' || rb == ']')) {
				getchar();
			}
			else {
				puts("\n\nОшибка: Вы ввели невозможный символ для границы");
				break;
			}
			printf("\n\nВведите шаг для функции: ");
			scanf("%lf", &step);
			if (rb == ')') {
				rNum -= step;
			}
			if (lb == '(') {
				lNum += step;
			}
			puts("\n\nВведите номер функции:\nY(x) - 1;\nV(x) - 2.\n");
			scanf("%d", &choise);
			switch (choise)
			{
			case 1:
				graph(lNum, rNum, f1);
				break;
			case 2:
				graph(lNum, rNum, f2);
				break;
			default:
				puts("\nОшибка: Функции под таки номером не существует.");
			}
			break;
		default:
			printf("\nОшибка: Вы ввели несуществующий пункт меню. Попробуйте снова:");
		}
		puts("\n\n\n");
		menu();
		getchar();
		scanf("%d", &choisemain);
	}

	return 0;
}

void menu()
{
	printf("|* * * * * * * * * * * * * * * Меню  программы * * * * * * * * * * * * * * * *|\n");
	printf("|                                                                             |\n");
	printf("|1.Вычислить значение функции Y(x).                                           |\n");
	printf("|2.Вычислить значение функции V(x).                                           |\n");
	printf("|3.Вычислить значение функции Y(x) с заданным интервалом и шагом.             |\n");
	printf("|4.Вычислить значение функции V(x) с заданным интервалом и шагом.             |\n");
	printf("|5.Построить график функции Y(x) или V(x).                                    |\n");
	printf("|6.Выйти из программы.                                                        |\n");
	printf("|                                                                             |\n");
	printf("|* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *|\n");
	puts("\n\nВведите номер пункта меню : ");
	return 0;
}

double f1(double x)
{
	double res;
	if (x == 0) {
		printf("\nОшибка: знаменатель равен нулю");
		return -1;
	}
	res = pow(x, 3) + (x / (sin(x / 57.3)));
	return res;
}

double f2(double x)
{
	double res;
	if (x < 10) { res = (((1. / 2) * pow(x, 2)) - sin(x / 57.3)); }
	else if (x >= 10 && x <= 15) { res = exp(x + 1); }
	else { res = sin((pow(x, 2) + 1) / 57.3); }
	return res;
}


int print_func(Funcional func, double lb, double rb, double step)
{
	puts("\n");
	printf("|------------------------|-----------------------|\n");
	for (double x = lb; x <= rb; x += step)
	{
		printf("|	x = %8.3f	 |	y = %8.3f	 |\n", x, func(x));
	}
	printf("|------------------------|-----------------------|\n");
	puts("\n");
	return 0;
}

int graph(double x0, double x1, Funcional funс)
{
	char screen[SCREENW][SCREENH];
	double x, y[SCREENW];
	double ymin = 0, ymax = 0;
	double hx, hy;
	int i, j;
	int xz, yz;
	hx = (x1 - x0) / (SCREENW - 1);
	for (i = 0, x = x0; i < SCREENW; ++i, x += hx)
	{
		y[i] = funс(x);
		if (y[i] < ymin) ymin = y[i];
		if (y[i] > ymax) ymax = y[i];
	}
	hy = (ymax - ymin) / (SCREENH - 1);
	yz = (int)floor(ymax / hy + 0.5);
	xz = (int)floor((0. - x0) / hx + 0.5);
	for (j = 0; j < SCREENH; ++j)
		for (i = 0; i < SCREENW; ++i)
		{
			if (j == yz && i == xz) screen[i][j] = '+';
			else if (j == yz) screen[i][j] = '-';
			else if (i == xz) screen[i][j] = '|';
			else screen[i][j] = ' ';
		}
	for (i = 0; i < SCREENW; ++i) {
		j = (int)floor((ymax - y[i]) / hy + 0.5);
		screen[i][j] = '*';
	}
	for (j = 0; j < SCREENH; ++j)
	{
		for (i = 0; i < SCREENW; ++i)  putchar(screen[i][j]);
		putchar('\n');
	}
	return 0;
}
